@page "/"
@rendermode InteractiveServer
@inject ISelectedPictureShowService selectedPictureShowService
@inject IPictureResizeService pictureResizeService
@inject IJSRuntime JS
<h2>Image Changer</h2>

<div class="form-control" style="margin:20px;width: 1230px">
    <label for="Image">Select Picture</label>
    <InputFile id="Image" OnChange="HandleSelectedImage" class="form-control" />
    <br />
    @if (pictureFile.File != null)
    {
        <label>Name: @pictureFile.File.Name </label>
        <br />
        <label>Size: @(Math.Round(pictureFile.File.Size / 1024.0 / 1024.0, 2)) MB</label>
        <br />
        <label>Size: @(Math.Round(pictureFile.File.Size / 1024.0, 2)) KB</label>
        <br />
        <label>Date: @pictureFile.File.LastModified.DateTime </label>
        <br />
        <label>Format: @pictureInformation.Format </label>
        <br />
        <label>Width (px): @pictureInformation.Width </label>
        <br />
        <label>Height (px): @pictureInformation.Height </label>
        <br />
        <img src="@pictureInformation.Url" alt="Image" style="max-width:1200px;" />
    }
</div>

@if (pictureFile.File != null)
{
    <div class="form-control" style="margin:20px; width:500px">
        <h3>Select Modify Options</h3>
        <input type="checkbox" @bind="isSelectedFormatOption" />
        <label style="font-size:x-large">Change Output Format</label>
        @if (isSelectedFormatOption)
        {
            <select @bind="selectedOutputFormat" class="form-control">
                <option value="Jpeg" selected>JPG</option>
                <option value="Icon">ICON</option>
                <option value="Png">PNG</option>
                <option value="Gif">GIF</option>
                <option value="Tiff">TIFF</option>
                <option value="Exif">Exif</option>
                <option value="Emf">Emf</option>
                <option value="Bmp">Bmp</option>
                <option value="Wmf">Wmf</option>
                <option value="MemoryBmp">Memory Bmp</option>
            </select>
        }
        <br />
        <input type="checkbox" @bind="changeSize" />
        <label style="font-size:x-large">Change Output Sizing</label>
        <br />
        @if (changeSize)
        {
            <div class="form-control" style="margin:20px; width:450px">
                <input type="checkbox" @onchange="ToggleMaxWH" checked="@maxWH" />
                <label>Output max size in pixels.</label>
                @if (maxWH)
                {
                    <div class="form-control" style="margin:20px; width:350px">
                        <label>Insert max WIDTH or HEIGHT in pixels</label>
                        <input type="number" @bind="maxOutputSize" />
                    </div>
                }
                <br />
                <input type="checkbox" @onchange="ToggleSpecificWH" checked="@specificWH" />
                <label> Output Specific Size </label>
                @if (specificWH)
                {
                    <div class="form-control" style="margin:20px; width:350px">
                        <label>Width (px)</label><br />
                        <input type="number" @bind="outputWidth" />
                        <br />
                        <label>Height (px)</label><br />
                        <input type="number" @bind="outputHeight" />
                    </div>
                }
            </div>
        }
        <button class="btn btn-primary" @onclick="DoChanges">Do Changes</button>
    </div>
    @if (bytes != null)
    {
        <div class="form-control" style="margin:20px;width: 1230px">
            <label>Changed Image</label>
            <br />
            <label>Name: @pictureInformation2.FileName </label>
            <br />
            <label>Size: @(Math.Round(pictureInformation2.FileSize.Value / 1024.0 / 1024.0, 2)) MB</label>
            <br />
            <label>Size: @(Math.Round(pictureInformation2.FileSize.Value / 1024.0, 2)) KB</label>
            <br />

            <label>Format: @pictureInformation2.Format </label>
            <br />
            <label>Width (px): @pictureInformation2.Width </label>
            <br />
            <label>Height (px): @pictureInformation2.Height </label>
            <br />
            <img src="@pictureInformation2.Url" alt="Image" style="max-width:1200px;" />
        </div>
        <button class="btn btn-primary" @onclick="DownloadImage">Download as @pictureInformation2.Format format</button>
    }
}

@code {
    private PictureInformation pictureInformation = new PictureInformation();
    private PictureInformation pictureInformation2 = new PictureInformation();
    private PictureFile pictureFile = new PictureFile();
    private bool isSelectedFormatOption = false;
    private string selectedOutputFormat;
    private bool changeSize = false;
    private bool maxWH = false;
    private bool specificWH = false;
    private int maxOutputSize = 0;
    private int outputWidth = 0;
    private int outputHeight = 0;
    private byte[] bytes = null;

    private async Task HandleSelectedImage(InputFileChangeEventArgs e)
    {
        bytes = null;
        pictureFile.File = e.File;
        pictureInformation = await selectedPictureShowService.ReturnSelectedPictureAsUrl(pictureFile);
        StateHasChanged();
    }
    private void ToggleMaxWH(ChangeEventArgs e)
    {
        maxWH = (bool)e.Value;
        if (maxWH)
        {
            specificWH = false;
            outputWidth = 0;
            outputHeight = 0;
        }
    }

    private void ToggleSpecificWH(ChangeEventArgs e)
    {
        specificWH = (bool)e.Value;
        if (specificWH)
        {
            maxWH = false;
            maxOutputSize = 0;
        }
    }

    private async Task DoChanges()
    {
        bytes = null;
        if (isSelectedFormatOption && !changeSize)
        {
            bytes = await pictureResizeService.ChangeJustFormat(pictureFile, selectedOutputFormat);
        }
        else if (changeSize && maxWH)
        {
            bytes = await pictureResizeService.ChangeSizeByMaxWH(pictureFile, maxOutputSize, selectedOutputFormat, isSelectedFormatOption);
        }
        else if (changeSize && specificWH)
        {
            bytes = await pictureResizeService.ChangeSizeBySpecificWH(pictureFile, outputWidth, outputHeight, selectedOutputFormat, isSelectedFormatOption);
        }
        pictureInformation2 = await selectedPictureShowService.ReturnSelectedPictureAsUrl(bytes);
        StateHasChanged();
    }
    private async Task DownloadImage()
    {
        await JS.InvokeVoidAsync("downloadFileFromUrl", pictureInformation2.Url, $"{pictureInformation2.FileName}.{pictureInformation2.Format.ToLower()}");
        
    }
}   
